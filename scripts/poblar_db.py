"""
Script para poblar la base de datos con datos de ejemplo
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.database import SessionLocal, engine
from app.models import *
from app.auth import get_password_hash
import json

def crear_datos_ejemplo():
    db = SessionLocal()
    
    try:
        print("üîß Creando datos de ejemplo...")
        
        # 1. Crear √°reas matem√°ticas
        areas = [
            AreaMatematica(
                nombre="√Ålgebra",
                descripcion="Operaciones algebraicas, ecuaciones y sistemas",
                icono="algebra",
                color="#FF6B6B",
                orden=1
            ),
            AreaMatematica(
                nombre="Geometr√≠a",
                descripcion="Figuras geom√©tricas, √°rea, per√≠metro y volumen",
                icono="geometry",
                color="#4ECDC4",
                orden=2
            ),
            AreaMatematica(
                nombre="C√°lculo",
                descripcion="Derivadas, integrales y l√≠mites",
                icono="calculus",
                color="#45B7D1",
                orden=3
            ),
            AreaMatematica(
                nombre="Estad√≠stica",
                descripcion="Probabilidad, estad√≠stica descriptiva y inferencial",
                icono="statistics",
                color="#FFA07A",
                orden=4
            )
        ]
        
        for area in areas:
            db.add(area)
        db.commit()
        print("‚úÖ √Åreas matem√°ticas creadas")
        
        # 2. Crear usuarios de ejemplo
        usuarios = [
            Usuario(
                nombre="Admin",
                apellido="Sistema",
                email="admin@edumath.com",
                password_hash=get_password_hash("admin123"),
                tipo_usuario=TipoUsuario.ADMIN,
                puntos_totales=1000,
                nivel_actual=5
            ),
            Usuario(
                nombre="Prof. Mar√≠a",
                apellido="Gonz√°lez",
                email="maria@edumath.com",
                password_hash=get_password_hash("profesor123"),
                tipo_usuario=TipoUsuario.PROFESOR,
                puntos_totales=500,
                nivel_actual=3
            ),
            Usuario(
                nombre="Juan",
                apellido="P√©rez",
                email="juan@estudiante.com",
                password_hash=get_password_hash("estudiante123"),
                tipo_usuario=TipoUsuario.ESTUDIANTE,
                puntos_totales=150,
                nivel_actual=2
            ),
            Usuario(
                nombre="Ana",
                apellido="L√≥pez",
                email="ana@estudiante.com",
                password_hash=get_password_hash("estudiante123"),
                tipo_usuario=TipoUsuario.ESTUDIANTE,
                puntos_totales=200,
                nivel_actual=2
            )
        ]
        
        for usuario in usuarios:
            db.add(usuario)
        db.commit()
        print("‚úÖ Usuarios creados")
        
        # 3. Crear cursos
        algebra = db.query(AreaMatematica).filter(AreaMatematica.nombre == "√Ålgebra").first()
        geometria = db.query(AreaMatematica).filter(AreaMatematica.nombre == "Geometr√≠a").first()
        profesor = db.query(Usuario).filter(Usuario.email == "maria@edumath.com").first()
        
        cursos = [
            Curso(
                titulo="√Ålgebra B√°sica",
                descripcion="Introducci√≥n al √°lgebra: variables, expresiones y ecuaciones lineales",
                objetivos="Dominar las operaciones algebraicas b√°sicas y resolver ecuaciones de primer grado",
                nivel_dificultad=NivelDificultad.BASICO,
                duracion_estimada=20,
                area_matematica_id=algebra.id,
                profesor_id=profesor.id
            ),
            Curso(
                titulo="Geometr√≠a Plana",
                descripcion="Estudio de figuras geom√©tricas en el plano: tri√°ngulos, cuadril√°teros y c√≠rculos",
                objetivos="Calcular √°reas, per√≠metros y resolver problemas geom√©tricos b√°sicos",
                nivel_dificultad=NivelDificultad.BASICO,
                duracion_estimada=25,
                area_matematica_id=geometria.id,
                profesor_id=profesor.id
            ),
            Curso(
                titulo="√Ålgebra Intermedia",
                descripcion="Ecuaciones cuadr√°ticas, sistemas de ecuaciones y funciones",
                objetivos="Resolver problemas m√°s complejos utilizando t√©cnicas algebraicas avanzadas",
                nivel_dificultad=NivelDificultad.INTERMEDIO,
                duracion_estimada=30,
                area_matematica_id=algebra.id,
                profesor_id=profesor.id
            )
        ]
        
        for curso in cursos:
            db.add(curso)
        db.commit()
        print("‚úÖ Cursos creados")
        
        # 4. Crear lecciones para √Ålgebra B√°sica
        algebra_basica = db.query(Curso).filter(Curso.titulo == "√Ålgebra B√°sica").first()
        
        lecciones_algebra = [
            Leccion(
                titulo="Introducci√≥n a las Variables",
                descripcion="¬øQu√© son las variables y c√≥mo se usan en matem√°ticas?",
                contenido="""
# Introducci√≥n a las Variables

Una **variable** es un s√≠mbolo (generalmente una letra) que representa un n√∫mero desconocido.

## Ejemplos:
- x, y, z son variables comunes
- En la expresi√≥n 2x + 3, 'x' es la variable

## ¬øPor qu√© usamos variables?
- Para resolver problemas generales
- Para representar cantidades desconocidas
- Para crear f√≥rmulas reutilizables
                """,
                orden=1,
                puntos_otorgados=10,
                tiempo_estimado=15,
                curso_id=algebra_basica.id
            ),
            Leccion(
                titulo="Operaciones con Variables",
                descripcion="Suma, resta, multiplicaci√≥n y divisi√≥n con expresiones algebraicas",
                contenido="""
# Operaciones con Variables

## Suma y Resta
- 2x + 3x = 5x (t√©rminos semejantes)
- 5y - 2y = 3y
- x + 2y no se puede simplificar (t√©rminos diferentes)

## Multiplicaci√≥n
- 2x √ó 3y = 6xy
- x √ó x = x¬≤

## Divisi√≥n
- 6x √∑ 2 = 3x
- x¬≤ √∑ x = x
                """,
                orden=2,
                puntos_otorgados=15,
                tiempo_estimado=20,
                curso_id=algebra_basica.id
            ),
            Leccion(
                titulo="Ecuaciones Lineales",
                descripcion="Resoluci√≥n de ecuaciones de primer grado",
                contenido="""
# Ecuaciones Lineales

Una ecuaci√≥n lineal tiene la forma: ax + b = c

## Pasos para resolver:
1. Aislar el t√©rmino con la variable
2. Aplicar operaciones inversas
3. Verificar la soluci√≥n

## Ejemplo:
2x + 5 = 13
2x = 13 - 5
2x = 8
x = 4
                """,
                orden=3,
                puntos_otorgados=20,
                tiempo_estimado=30,
                curso_id=algebra_basica.id
            )
        ]
        
        for leccion in lecciones_algebra:
            db.add(leccion)
        db.commit()
        print("‚úÖ Lecciones creadas")
        
        # 5. Crear ejercicios
        leccion_variables = db.query(Leccion).filter(Leccion.titulo == "Introducci√≥n a las Variables").first()
        leccion_operaciones = db.query(Leccion).filter(Leccion.titulo == "Operaciones con Variables").first()
        
        ejercicios = [
            Ejercicio(
                titulo="Identificar Variables",
                enunciado="¬øCu√°l de las siguientes es una variable en la expresi√≥n 3x + 7?",
                tipo_ejercicio=TipoEjercicio.OPCION_MULTIPLE,
                nivel_dificultad=NivelDificultad.BASICO,
                puntos_otorgados=5,
                orden=1,
                opciones_json=json.dumps(["3", "x", "7", "+"]),
                respuesta_correcta="x",
                explicacion="La variable es 'x' porque representa un valor desconocido.",
                leccion_id=leccion_variables.id
            ),
            Ejercicio(
                titulo="T√©rminos Semejantes",
                enunciado="Simplifica la expresi√≥n: 4x + 2x",
                tipo_ejercicio=TipoEjercicio.DESARROLLO,
                nivel_dificultad=NivelDificultad.BASICO,
                puntos_otorgados=10,
                orden=1,
                respuesta_correcta="6x",
                explicacion="4x + 2x = (4+2)x = 6x",
                leccion_id=leccion_operaciones.id
            ),
            Ejercicio(
                titulo="Multiplicaci√≥n de Variables",
                enunciado="¬øCu√°l es el resultado de 3x √ó 2y?",
                tipo_ejercicio=TipoEjercicio.OPCION_MULTIPLE,
                nivel_dificultad=NivelDificultad.BASICO,
                puntos_otorgados=5,
                orden=2,
                opciones_json=json.dumps(["5xy", "6xy", "6x", "6y"]),
                respuesta_correcta="6xy",
                explicacion="3x √ó 2y = 3 √ó 2 √ó x √ó y = 6xy",
                leccion_id=leccion_operaciones.id
            )
        ]
        
        for ejercicio in ejercicios:
            db.add(ejercicio)
        db.commit()
        print("‚úÖ Ejercicios creados")
        
        # 6. Crear logros
        logros = [
            Logro(
                nombre="Primer Paso",
                descripcion="Completar tu primera lecci√≥n",
                icono="first_step",
                puntos_requeridos=10,
                condicion_json=json.dumps({"tipo": "lecciones_completadas", "cantidad": 1})
            ),
            Logro(
                nombre="Estudiante Dedicado",
                descripcion="Completar 5 lecciones",
                icono="dedicated",
                puntos_requeridos=50,
                condicion_json=json.dumps({"tipo": "lecciones_completadas", "cantidad": 5})
            ),
            Logro(
                nombre="Maestro del √Ålgebra",
                descripcion="Completar un curso de √°lgebra",
                icono="algebra_master",
                puntos_requeridos=100,
                condicion_json=json.dumps({"tipo": "curso_completado", "area": "√Ålgebra"})
            ),
            Logro(
                nombre="Coleccionista de Puntos",
                descripcion="Obtener 500 puntos",
                icono="point_collector",
                puntos_requeridos=500,
                condicion_json=json.dumps({"tipo": "puntos_totales", "cantidad": 500})
            )
        ]
        
        for logro in logros:
            db.add(logro)
        db.commit()
        print("‚úÖ Logros creados")
        
        print("\nüéâ ¬°Datos de ejemplo creados exitosamente!")
        print("\nüìã Resumen:")
        print(f"   üë• {len(usuarios)} usuarios creados")
        print(f"   üìö {len(areas)} √°reas matem√°ticas")
        print(f"   üéì {len(cursos)} cursos")
        print(f"   üìñ {len(lecciones_algebra)} lecciones")
        print(f"   ‚úèÔ∏è {len(ejercicios)} ejercicios")
        print(f"   üèÜ {len(logros)} logros")
        
        print("\nüîê Credenciales de prueba:")
        print("   Admin: admin@edumath.com / admin123")
        print("   Profesor: maria@edumath.com / profesor123")
        print("   Estudiante: juan@estudiante.com / estudiante123")
        print("   Estudiante: ana@estudiante.com / estudiante123")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    crear_datos_ejemplo()
